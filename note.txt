//DOCKER
docker run --name pg-cont -p 5432:5432 -e POSTGRES_USER=root -e POSTGRES_PASSWORD=olim123 -d postgres
docker exec -it pg-cont bin/bash  || == == == => psql -U root
// delete all docker volumes except specific one
docker volume ls -q | grep -v myvolume | xargs docker volume rm
docker network create bank_network
docker network connect bank_network pg-cont
docker container inspect pg-cont
docker network inspect bank_network
docker network ls

//Dockerfile
docker run --name olimbank --network bank_network -p 8080:8080 -e DB_SOURCE="postgresql://root:olim123@pg-cont:5432/olim_bank?sslmode=disable" olimbank:latest


//DATABASE
\du  //show users
\dt  //show tables
\l  //show dbs
\c db_name //change db
dropdb db_name //delete db
// for the current TRANSACTION
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

..
//GO

interface >> defines what methods "functions" a certain struct contain


1. init migration files
-- migrate create -ext sql -dir db/migration -seq init_schema
paste "sql create table queries" to migrate up schema
paste "sql drop table queries" to migrate down schema

2. config sqlc.yaml 
write queries in db/query/ 
command line: sqlc generate
it will create db models and queries in go language in sqlc filder.


3. write test.M for db connection
write test for sqlc files

4. github/workflows/ci.yml

5. create api/server.go and api/account.go, also main.go

6. create config.go and env or json of credentials, and update db/sqlc/main_test.go and main.go db-connection

7.  sqlc >> emit_interface: true
type Store interface {}
make mock
write api test with mock :(

8.  transfer api with test, validator, currency util
-- migrate create -ext sql -dir db/migration -seq add_users
add user table with index and constraints to account owner
make migrateup1

9. create token folder, jwt | paseto
user.login
auth.middleware

10.Dockerfile, docker-compose, docker
AWS, ECR, EC2, S3, IAM
ECR -> create repository -> github/workflow/deploy -> Registry=go_bank_k8s
iam -> users -> create group=deployment -> copy role-> set github.action.secrets=ACCESSS_IAM_ROLE

? set docker exec env variable
? test undefined problems & versions collision.

// "postgresql://root:olim123@172.17.0.2:5432/olim_bank?sslmode=disable"
