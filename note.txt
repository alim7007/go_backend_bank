docker run --name pg-cont -p 5432:5432 -e POSTGRES_USER=root -e POSTGRES_PASSWORD=olim123 -d postgres
docker exec -it pg-cont bin/bash  || == == == => psql -U root
\du  //show users
\dt  //show tables
\l  //show dbs
\c db_name //change db
dropdb db_name //delete db
// for the current TRANSACTION
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

1. init migration files
-- migrate create -ext sql -dir db/migration -seq init_schema
paste sql create table queries to migrate up schema
paste sql drop table queries to migrate down schema

2. config sqlc.yaml 
write queries in db/query/ 
command line: sqlc generate
it will create db, models, sqlc files that contain queries in go langugae.


3. write test.M for db connection
write test for sqlc files


? set docker exec env variable
? test undefined problems & versions collision.




# This workflow will build a golang project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go

name: ci-test

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres
        env:
          POSTGRES_USER: root
          POSTGRES_PASSWORD: olim123
          POSTGRES_DB: olim_bank
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.19

      - name: Check out code into the GO module dir
        run: actions/checkout@v2

      -name: Install golang-migrate
       run: | 
          curl -L https://github.com/golang-migrate/migrate/releases/download/v4.15.2/migrate.linux-amd64.tar.gz | tar xvz
          sudo mv migrate.linux-amd64 /usr/bin/
          which migrate

      - name: Run migrations
        run: make migrateup

      - name: Test
        run: make test
